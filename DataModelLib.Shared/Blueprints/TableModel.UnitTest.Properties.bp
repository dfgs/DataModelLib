{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end }}
// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{


		{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
		{{- if dtoAttribute}}
		{{- mockCount = GetMockCount class }}
		{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}
		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
		#region {{tableName}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldReturnIsModelOf()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model model;
			{{tableName}} item1, item2;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			item1 = MockDatabase.Create{{tableName}}({{mockCount+1}});
			item2 = MockDatabase.Create{{tableName}}({{mockCount+2}});

			model = new Models.{{tableName}}Model(testDatabaseModel, item1);
			Assert.IsTrue(model.IsModelOf(item1));
			Assert.IsFalse(model.IsModelOf(item2));
		}

		[TestMethod]
		public void ShouldGetSetProperty()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model model;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			model = testDatabaseModel.Get{{tableName}}(1);

			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			Assert.AreEqual("{{property.name}}1", model.{{property.name}});
			model.{{property.name}} = "Changed";
			Assert.AreEqual("Changed", model.{{property.name}});
			{{-else if property.type_name=="bool"}}
			Assert.IsFalse( model.{{property.name}});
			model.{{property.name}} = true;
			Assert.IsTrue( model.{{property.name}});
			{{-else if !(property.attributes | find "ForeignKey")}}
			Assert.AreEqual(({{property.type_name}})1, model.{{property.name}});
			model.{{property.name}} = 2;
			Assert.AreEqual(({{property.type_name}})2, model.{{property.name}});
			{{-end}}

			{{-end}}
			{{end}}
		}
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
		

		#endregion
		{{- end }}

		

	}
}
