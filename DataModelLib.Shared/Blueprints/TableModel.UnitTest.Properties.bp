{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}


{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- dto= class | GetDTO }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- -}}


// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}



namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
	
		#region {{dto}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldReturnIsModelOf()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;
			Tables.{{dto}} item1, item2;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			item1 = MockDatabase.Create{{dto}}({{mockCount+1}});
			item2 = MockDatabase.Create{{dto}}({{mockCount+2}});

			model = new Models.{{dto}}Model(testDatabaseModel, item1);
			Assert.IsTrue(model.IsModelOf(item1));
			Assert.IsFalse(model.IsModelOf(item2));
		}

		[TestMethod]
		public void ShouldGetSetProperty()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			model = testDatabaseModel.Get{{dto}}(1);

			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			Assert.AreEqual("{{property.name}}1", model.{{property.name}});
			model.{{property.name}} = "Changed";
			Assert.AreEqual("Changed", model.{{property.name}});
			{{-else if property.type_name=="bool"}}
			Assert.IsFalse( model.{{property.name}});
			model.{{property.name}} = true;
			Assert.IsTrue( model.{{property.name}});
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			Assert.AreEqual(({{property.type_name}})1, model.{{property.name}});
			model.{{property.name}} = 2;
			Assert.AreEqual(({{property.type_name}})2, model.{{property.name}});
			{{-end}}

			{{-end}}
			{{end}}
		}

		[TestMethod]
		public void ShouldRaisePropertyChangedEvent()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;
			#nullable enable
			string? propertyName = null;
			#nullable disable

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			model = testDatabaseModel.Get{{dto}}(1);
			model.PropertyChanged += (_, e) => { propertyName = e.PropertyName; };


			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			model.{{property.name}} = "Changed";
			Assert.AreEqual("{{property.name}}", propertyName);
			{{-else if property.type_name=="bool"}}
			model.{{property.name}} = true;
			Assert.AreEqual("{{property.name}}", propertyName);
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			model.{{property.name}} = 2;
			Assert.AreEqual("{{property.name}}", propertyName);
			{{-end}}

			{{-end}}
			{{end}}
		}
		
		[TestMethod]
		public void ShouldNotRaisePropertyChangedEvent()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;
			#nullable enable
			string? propertyName = null;
			#nullable disable

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			model = testDatabaseModel.Get{{dto}}(1);
			model.PropertyChanged += (_, e) => { Assert.Fail(); };


			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			model.{{property.name}} = "{{property.name}}1";
			Assert.IsNull(propertyName);
			{{-else if property.type_name=="bool"}}
			model.{{property.name}} = false;
			Assert.IsNull(propertyName);
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			model.{{property.name}} = 1;
			Assert.IsNull(propertyName);
			{{-end}}

			{{-end}}
			{{end}}
		}

		[TestMethod]
		public void ShouldRaiseRowChangingEvent()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;
			#nullable enable
			string? propertyName = null;
			object? oldValue = null;
			object? newValue = null;
			#nullable disable

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			testDatabaseModel.{{dto}}RowChanging += (_, p, oldV, newV) => { propertyName = p; oldValue = oldV; newValue = newV; };

			model = testDatabaseModel.Get{{dto}}(1);

			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			model.{{property.name}} = "Changed";
			Assert.AreEqual("{{property.name}}", propertyName);
			Assert.AreEqual("{{property.name}}1", oldValue);
			Assert.AreEqual("Changed", newValue);
			{{-else if property.type_name=="bool"}}
			model.{{property.name}} = true;
			Assert.AreEqual("{{property.name}}", propertyName);
			Assert.AreEqual(false, oldValue);
			Assert.AreEqual(true, newValue);
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			model.{{property.name}} = 2;
			Assert.AreEqual("{{property.name}}", propertyName);
			Assert.AreEqual(({{property.type_name}})1, oldValue);
			Assert.AreEqual(({{property.type_name}})2, newValue);
			{{-end}}

			{{-end}}
			{{end}}
		}

		[TestMethod]
		public void ShouldRaiseRowChangedEvent()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;
			#nullable enable
			string? propertyName = null;
			object? oldValue = null;
			object? newValue = null;
			#nullable disable

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			testDatabaseModel.{{dto}}RowChanged += (_, p, oldV, newV) => { propertyName = p; oldValue = oldV; newValue = newV; };

			model = testDatabaseModel.Get{{dto}}(1);

			{{for property in class.properties }}
			{{-if (property.attributes | find "Column")}}
			{{-if property.type_name=="string"}}
			model.{{property.name}} = "Changed";
			Assert.AreEqual("{{property.name}}", propertyName);
			Assert.AreEqual("{{property.name}}1", oldValue);
			Assert.AreEqual("Changed", newValue);
			{{-else if property.type_name=="bool"}}
			model.{{property.name}} = true;
			Assert.AreEqual("{{property.name}}", propertyName);
			Assert.AreEqual(false, oldValue);
			Assert.AreEqual(true, newValue);
			{{-else if !(property.attributes | find "ForeignKey") && !(property.attributes | find "PrimaryKey")}}
			model.{{property.name}} = 2;
			Assert.AreEqual("{{property.name}}", propertyName);
			Assert.AreEqual(({{property.type_name}})1, oldValue);
			Assert.AreEqual(({{property.type_name}})2, newValue);
			{{-end}}

			{{-end}}
			{{end}}
		}

		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}
	
		#endregion
			

	}
}
