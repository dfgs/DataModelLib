{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end }}
// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		{{ for table in project.classes  | with_attribute "TableAttribute"}}
		{{- dtoAttribute = table.attributes | find "DTOAttribute"  }}
		{{- if dtoAttribute}}
		{{- mockCount = GetMockCount table }}


		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
		#region {{tableName}} table

		[TestMethod]
		public void ShouldRemove{{tableName}}()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());

			// remove last item from table
			testDatabaseModel.Remove{{tableName}}(testDatabaseModel.Get{{tableName}}Table().ElementAt({{mockCount-1}}));
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount-1}}, models.Length);
			
			{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
			{{-if primaryKey}}
			// check if returned PKs are correct for each item
			for({{primaryKey.type_name}} index=1;index<={{mockCount-1}};index++ )
			{
				Assert.AreEqual(index, models[index-1].{{primaryKey.name}});
			}
			{{-else}}
			Assert.Fail("No primary key defined")
			{{-end}}
		}
		
		[TestMethod]
		public void ShouldNotRemoveInvalid{{tableName}}()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;
			Models.{{tableName}}Model item;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());

			// item should be removed once
			item = testDatabaseModel.Get{{tableName}}Table().ElementAt(0);
			testDatabaseModel.Remove{{tableName}}(item);
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount-1}}, models.Length);
			// item cannot be removed again
			testDatabaseModel.Remove{{tableName}}(item);
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount-1}}, models.Length);
		}

		
		[TestMethod]
		public void ShouldRaise{{tableName}}TableChangingOnRemove()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			{{tableName}}? changedItem = null;
			DataModelLib.TableChangedActions? changedAction = null;
			#nullable disable

			
			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseModel.{{tableName}}TableChanging += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index;  };

			testDatabaseModel.Remove{{tableName}}(testDatabaseModel.Get{{tableName}}Table().ElementAt({{mockCount-1}}));
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			
			Assert.AreEqual({{mockCount-1}}, models.Length);
			{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
			{{-if primaryKey}}
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataModelLib.TableChangedActions.Remove, changedAction);
			Assert.AreEqual({{mockCount-1}}, changedIndex);
			{{-else}}
			Assert.Fail("No primary key defined")
			{{-end}}
		}
		
		[TestMethod]
		public void ShouldRaise{{tableName}}TableChangedOnRemove()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			{{tableName}}? changedItem = null;
			DataModelLib.TableChangedActions? changedAction = null;
			#nullable disable

			
			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseModel.{{tableName}}TableChanged += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index;  };

			testDatabaseModel.Remove{{tableName}}(testDatabaseModel.Get{{tableName}}Table().ElementAt({{mockCount-1}}));
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			
			Assert.AreEqual({{mockCount-1}}, models.Length);
			{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
			{{-if primaryKey}}
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataModelLib.TableChangedActions.Remove, changedAction);
			Assert.AreEqual({{mockCount-1}}, changedIndex);
			{{-else}}
			Assert.Fail("No primary key defined")
			{{-end}}
			
		}
		
		#endregion
		{{- end }}
		{{end }}


	}
}
