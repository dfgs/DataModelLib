{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}


{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on unit test class {{class.name}}
{{-ret}}
{{-end}}
{{- databaseName=(dtoAttribute.parameters | find "Name").value }}

{{- -}}
// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}




namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		{{ for tableClass in project.classes  | with_attribute "TableAttribute"}}
		{{- dtoAttribute = tableClass.attributes | find "DTOAttribute"  }}
		{{- if !dtoAttribute}}
		#warning no DTO attribute was set on unit test class {{tableClass.name}}
		{{-continue}}
		{{-end}}
		{{- mockCount = GetMockCount tableClass }}
		{{-primaryKey=tableClass.properties | with_attribute "PrimaryKey" | array.first}}
		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
#region {{tableName}} table

		{{-if primaryKey}}
		[TestMethod]
		public void ShouldGet{{tableName}}Table()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model[] models;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			// check if returned count is equal to count generated in mock database
			Assert.AreEqual({{mockCount}}, models.Length);
			
			// check if returned PKs are correct for each item
			for({{primaryKey.type_name}} index=1;index<={{mockCount}};index++ )
			{
				Assert.AreEqual(index, models[index-1].{{primaryKey.name}});
			}
		}

		[TestMethod]
		public void ShouldGet{{tableName}}TableByPredicate()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model[] models;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			
			// check if we can get table items using predicate based on primary key
			models = testDatabaseModel.Get{{tableName}}Table(item => item.{{primaryKey.name}} == 1).ToArray();
			Assert.AreEqual(1, models.Length);
			Assert.AreEqual(1, models[0].{{primaryKey.name}});
		}
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
#endregion
		{{- end }}


	}
}
