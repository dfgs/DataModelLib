{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- databaseClass = project.classes | with_attribute "DatabaseAttribute" | array.first}}
{{- if !databaseClass}}
#warning no Database attribute was set on unit test class
{{-ret}}
{{-end}}

{{- dtoAttribute = databaseClass.attributes | find "DTOAttribute"}}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on class {{databaseClass.name}}
{{-ret}}
{{-end}}
{{- databaseName=(dtoAttribute.parameters | find "Name").value }}

{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on unit test class {{class.name}}
{{-ret}}
{{-end}}
{{- tableName=(dtoAttribute.parameters | find "Name").value }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- func GetRelations
	result = []

	for foreignclass in project.classes
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"
								
				dtoAttribute = foreignclass.attributes | find "DTOAttribute" 
				if (!dtoAttribute)
					continue
				end
				foreignTableName=(dtoAttribute.parameters | find "Name").value

				relation = { 
					ForeignTable: foreignTableName,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyType: property.type_name,
					ForeignKeyIsNullable: isnullable,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end -}}

{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==tableName
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==tableName
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		
		#region {{tableName}} table
		{{-if primaryKey}}

		// get property from primary class
		{{- for relation in GetRelations | where_is_foreign}}
		[TestMethod]
		public void ShouldGet{{relation.ForeignPropertyName}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			#nullable enable
			{{relation.PrimaryTable}}Model? primaryItem;
			#nullable disable

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			item=testDatabaseModel.Get{{tableName}}(1);
			primaryItem=item.Get{{relation.ForeignPropertyName}}();
	
			Assert.IsNotNull(primaryItem);
			Assert.AreEqual(item.{{relation.ForeignKey}}, primaryItem.{{relation.PrimaryKey}});
		}
		
		{{-if relation.ForeignKeyIsNullable}}
		[TestMethod]
		public void ShouldNotGet{{relation.ForeignPropertyName}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			#nullable enable
			{{relation.PrimaryTable}}Model? primaryItem;
			#nullable disable

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			// get an item item foreign key is not defined
			item=testDatabaseModel.Get{{tableName}}Table().First(item=>item.{{relation.ForeignKey}} is null);
			primaryItem=item.Get{{relation.ForeignPropertyName}}();
			// so foreign property should be null as well
			Assert.IsNull(primaryItem);
		}
		{{-end}}

		[TestMethod]
		public void ShouldRaise{{relation.ForeignPropertyName}}ChangedEventWhenUpdatingForeignKey()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			bool triggered = false;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			item=testDatabaseModel.Get{{tableName}}(1);
			item.{{relation.ForeignPropertyName}}Changed += (_, e) => { triggered=true; };
			item.{{relation.ForeignKey}} = 2;
			Assert.IsTrue(triggered);
		}

		{{-end}}
		
		// get collection from foreign class
		{{- for relation in GetRelations | where_is_primary}}
		[TestMethod]
		public void ShouldGet{{relation.PrimaryPropertyName}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			item=testDatabaseModel.Get{{tableName}}(1);
			foreignItems=item.Get{{relation.PrimaryPropertyName}}();
	
			Assert.IsNotNull(foreignItems);
			foreach({{relation.ForeignTable}}Model foreignItem in foreignItems)
			{
				Assert.AreEqual(item.{{relation.PrimaryKey}}, foreignItem.{{relation.ForeignKey}});
			}
		}	

		[TestMethod]
		public void ShouldNotGet{{relation.PrimaryPropertyName}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model model;
			{{tableName}} item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			// create new item with no foreign item attached
			item=MockDatabase.Create{{tableName}}({{mockCount+1}});
			model=testDatabaseModel.Create{{tableName}}Model(item);
			testDatabaseModel.Add{{tableName}}(item);

			foreignItems=model.Get{{relation.PrimaryPropertyName}}();
	
			// so new item should not have foreign items
			Assert.IsNotNull(foreignItems);
			Assert.AreEqual(0,foreignItems.Count());

		}

		[TestMethod]
		public void ShouldRaise{{relation.PrimaryPropertyName}}ChangedWhenRemoving{{relation.ForeignTable}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;
			{{relation.ForeignTable}}Model foreignItem;
			#nullable enable
			{{relation.ForeignTable}}? eventItem=null;
			DataLib.TableChangedActions? action=null; 
			int? index=null;
			#nullable disable
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			item=testDatabaseModel.Get{{tableName}}(1);
			item.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { eventItem = item; action = a; index = i; };

			foreignItems=item.Get{{relation.PrimaryPropertyName}}();
			count=foreignItems.Count();
			foreignItem=foreignItems.ElementAt(count-1);
			foreignItem.Delete();

			Assert.IsNotNull(eventItem);
			Assert.IsNotNull(action);
			Assert.IsNotNull(index);

			Assert.AreEqual(({{relation.ForeignKeyType}})1, eventItem.{{relation.ForeignKey}});
			Assert.AreEqual(count-1, index);
			Assert.AreEqual(DataLib.TableChangedActions.Remove, action);

		}	
		[TestMethod]
		public void ShouldRaise{{relation.PrimaryPropertyName}}ChangedWhenAdding{{relation.ForeignTable}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;
			{{relation.ForeignTable}} foreignItem;
			#nullable enable
			{{relation.ForeignTable}}? eventItem=null;
			DataLib.TableChangedActions? action=null; 
			int? index=null;
			#nullable disable
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			item=testDatabaseModel.Get{{tableName}}(1);
			item.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { eventItem = item; action = a; index = i; };

			foreignItems=item.Get{{relation.PrimaryPropertyName}}();
			count=foreignItems.Count();

			// add new item in foreign table
			foreignItem=MockDatabase.Create{{relation.ForeignTable}}(0);
			foreignItem.{{relation.ForeignKey}} = 1;
			testDatabaseModel.Add{{relation.ForeignTable}}( foreignItem );

			Assert.IsNotNull(eventItem);
			Assert.IsNotNull(action);
			Assert.IsNotNull(index);

			Assert.AreEqual(({{relation.ForeignKeyType}})1, eventItem.{{relation.ForeignKey}});
			Assert.AreEqual(count, index);
			Assert.AreEqual(DataLib.TableChangedActions.Add, action);

		}	
		[TestMethod]
		public void ShouldRaise{{relation.PrimaryPropertyName}}ChangedWhenChanging{{relation.ForeignTable}}()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item1,item2;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems1;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems2;
			{{relation.ForeignTable}}Model foreignItem1,foreignItem2;
			#nullable enable
			{{relation.ForeignTable}}? eventItem1=null;
			DataLib.TableChangedActions? action1=null; 
			int? index1=null;
			{{relation.ForeignTable}}? eventItem2=null;
			DataLib.TableChangedActions? action2=null; 
			int? index2=null;
			#nullable disable
			int count1,count2;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			
			item1=testDatabaseModel.Get{{tableName}}(1);
			item1.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { eventItem1 = item; action1 = a; index1 = i; };
			
			item2=testDatabaseModel.Get{{tableName}}(2);
			item2.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { eventItem2 = item; action2 = a; index2 = i; };

			foreignItems1=item1.Get{{relation.PrimaryPropertyName}}();
			count1=foreignItems1.Count();

			foreignItems2=item2.Get{{relation.PrimaryPropertyName}}();
			count2=foreignItems2.Count();

			foreignItem1=foreignItems1.ElementAt(count1-1);
			
			// changing foreign property
			foreignItem1.{{relation.ForeignKey}} = 2;

			Assert.IsNotNull(eventItem1);
			Assert.IsNotNull(action1);
			Assert.IsNotNull(index1);

			Assert.AreEqual(({{relation.ForeignKeyType}})2, eventItem1.{{relation.ForeignKey}});
			Assert.AreEqual(count1-1, index1);
			Assert.AreEqual(DataLib.TableChangedActions.Remove, action1);

			Assert.AreEqual(({{relation.ForeignKeyType}})2, eventItem2.{{relation.ForeignKey}});
			Assert.AreEqual(count2-1, index2);
			Assert.AreEqual(DataLib.TableChangedActions.Add, action2);
			
			// double check if index2 is correct 
			foreignItem2=item2.Get{{relation.PrimaryPropertyName}}().ElementAt(index2!.Value);
			Assert.AreEqual(foreignItem1, foreignItem2);


		}	
		[TestMethod]
		public void ShouldNotRaise{{relation.PrimaryPropertyName}}ChangedWhenKeepingSamePropertyValue()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;
			{{relation.ForeignTable}}Model foreignItem;
			#nullable enable
			{{relation.ForeignTable}}? eventItem=null;
			DataLib.TableChangedActions? action=null; 
			int? index=null;
			#nullable disable
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			
			item=testDatabaseModel.Get{{tableName}}(1);
			foreach({{tableName}}Model otherItem in testDatabaseModel.Get{{tableName}}Table())
			{
				otherItem.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { Assert.Fail(); };
			}

			foreignItems=item.Get{{relation.PrimaryPropertyName}}();
			count=foreignItems.Count();

			foreignItem=foreignItems.ElementAt(count-1);
			
			// changing foreign property
			foreignItem.{{relation.ForeignKey}} = 1;

			Assert.IsNull(eventItem);
			Assert.IsNull(action);
			Assert.IsNull(index);

			

		}	
		[TestMethod]
		public void ShouldRaise{{relation.PrimaryPropertyName}}ChangedWhenChanging{{relation.ForeignTable}}WithInvalidID()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;
			{{relation.ForeignTable}}Model foreignItem;
			#nullable enable
			{{relation.ForeignTable}}? eventItem=null;
			DataLib.TableChangedActions? action=null; 
			int? index=null;
			#nullable disable
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			
			item=testDatabaseModel.Get{{tableName}}(1);
			item.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { eventItem = item; action = a; index = i; };
			foreach({{tableName}}Model otherItem in testDatabaseModel.Get{{tableName}}Table())
			{
				if (otherItem==item) continue;
				otherItem.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { Assert.Fail(); };
			}

			foreignItems=item.Get{{relation.PrimaryPropertyName}}();
			count=foreignItems.Count();

			foreignItem=foreignItems.ElementAt(count-1);
			
			// changing foreign property
			foreignItem.{{relation.ForeignKey}} = 0;	// doesn't exist'

			Assert.IsNotNull(eventItem);
			Assert.IsNotNull(action);
			Assert.IsNotNull(index);

			Assert.AreEqual(({{relation.ForeignKeyType}})0, eventItem.{{relation.ForeignKey}});
			Assert.AreEqual(count-1, index);
			Assert.AreEqual(DataLib.TableChangedActions.Remove, action);

		}	
		{{- if relation.ForeignKeyIsNullable}}
		[TestMethod]
		public void ShouldRaise{{relation.PrimaryPropertyName}}ChangedWhenChanging{{relation.ForeignTable}}WithNullID()
		{
			{{databaseName}}Model testDatabaseModel;
			{{tableName}}Model item;
			IEnumerable<{{relation.ForeignTable}}Model> foreignItems;
			{{relation.ForeignTable}}Model foreignItem;
			#nullable enable
			{{relation.ForeignTable}}? eventItem=null;
			DataLib.TableChangedActions? action=null; 
			int? index=null;
			#nullable disable
			int count;

			testDatabaseModel = new {{databaseName}}Model(MockDatabase.Create());
			
			item=testDatabaseModel.Get{{tableName}}(1);
			item.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { eventItem = item; action = a; index = i; };
			foreach({{tableName}}Model otherItem in testDatabaseModel.Get{{tableName}}Table())
			{
				if (otherItem==item) continue;
				otherItem.{{relation.PrimaryPropertyName}}Changed += (item, a, i) => { Assert.Fail(); };
			}

			foreignItems=item.Get{{relation.PrimaryPropertyName}}();
			count=foreignItems.Count();

			foreignItem=foreignItems.ElementAt(count-1);
			
			// changing foreign property
			foreignItem.{{relation.ForeignKey}} = null;

			Assert.IsNotNull(eventItem);
			Assert.IsNotNull(action);
			Assert.IsNotNull(index);

			Assert.IsNull(eventItem.{{relation.ForeignKey}});
			Assert.AreEqual(count-1, index);
			Assert.AreEqual(DataLib.TableChangedActions.Remove, action);

		}	
		{{-end}}


		{{-end}}


		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
		

		#endregion

		

	}
}
