{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- databaseClass = project.classes | with_attribute "DatabaseAttribute" | array.first}}
{{- if !databaseClass}}
#warning no Database attribute was set on unit test class
{{-ret}}
{{-end}}

{{- dtoAttribute = databaseClass.attributes | find "DTOAttribute"}}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on class {{databaseClass.name}}
{{-ret}}
{{-end}}
{{- databaseName=(dtoAttribute.parameters | find "Name").value }}

{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on unit test class {{class.name}}
{{-ret}}
{{-end}}
{{- tableName=(dtoAttribute.parameters | find "Name").value }}

{{- mockCount = GetMockCount class }}
{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}

{{- func GetRelations
	result = []

	for foreignclass in project.classes
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass.name,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end -}}
{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==class.name
			result = result + [relation]
		end
	end

	ret result
end -}}
{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==class.name
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		
		#region {{tableName}} table
		{{-if primaryKey}}

		{{- for relation in GetRelations | where_is_foreign}}
		[TestMethod]
		public void ShouldGet{{relation.ForeignPropertyName}}()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model item;
			#nullable enable
			Models.{{relation.PrimaryTable}}Model? primaryItem;
			#nullable disable

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			item=testDatabaseModel.Get{{tableName}}(1);
			primaryItem=item.Get{{relation.ForeignPropertyName}}();
	
			Assert.IsNotNull(primaryItem);
			Assert.AreEqual(item.{{relation.ForeignKey}}, primaryItem.{{relation.PrimaryKey}});
		}
		
		{{-if relation.ForeignKeyIsNullable}}
		[TestMethod]
		public void ShouldNotGet{{relation.ForeignPropertyName}}()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model item;
			#nullable enable
			Models.{{relation.PrimaryTable}}Model? primaryItem;
			#nullable disable

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			// get an item item foreign key is not defined
			item=testDatabaseModel.Get{{tableName}}Table().First(item=>item.{{relation.ForeignKey}} is null);
			primaryItem=item.Get{{relation.ForeignPropertyName}}();
			// so foreign property should be null as well
			Assert.IsNull(primaryItem);
		}
		{{-end}}

		{{-end}}
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
		

		#endregion

		

	}
}
