{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func GetRelations
	result = []

	for foreignclass in project.classes | with_attribute "TableModelAttribute"
		for property in foreignclass.properties
			attribute = property.attributes | find "ForeignKey"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass | GetDTO,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					ForeignKeyType: property.type_name,
					PrimaryPropertyName: (attribute.parameters | find "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}


{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==dto
			result = result + [relation]
		end
	end

	ret result
end -}}

{{- func group_by_foreign_table
	result = []

	for relation in $0
		
		groupedrelation=nil
		for item in result
			if item.ForeignTable == relation.ForeignTable
				groupedrelation=item
			end
		end
		if groupedrelation==null 
			groupedrelation = {
				ForeignTable: relation.ForeignTable,
				Relations: []
			}
			result = result + [groupedrelation]
		end
		groupedrelation.Relations = groupedrelation.Relations + [relation]
		
	end

	ret result
end -}}

{{- databaseModels = (project.classes  | with_attribute "DatabaseModelAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}

{{- dto= class | GetDTO }}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
//
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}


namespace {{class.namespace}}
{

	public partial class {{class.name}} : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
		
		{{-for relation in GetRelations | where_is_primary }}
		public event DataLib.TableChangedEventHandler<Tables.{{relation.ForeignTable}}> {{relation.PrimaryPropertyName}}Changed;
		{{- end }}

		{{-for relation in GetRelations | where_is_foreign }}
		public event EventHandler {{relation.ForeignPropertyName}}Changed;
		{{- end }}

		private Tables.{{dto}} dataSource
		{
			get;
			set;
		}

		private {{databaseModel.name}} databaseModel;
			
		{{- for column in class.properties | with_attribute "Column" }}
		public {{column.type_name}} {{column.name}} 
		{
			get => dataSource.{{column.name}};
			set 
			{
				if (value==dataSource.{{column.name}}) return;
				{{column.type_name}} oldValue=dataSource.{{column.name}}; 
				databaseModel.Notify{{dto}}RowChanging(dataSource,nameof({{column.name}}), oldValue,value ); 
				dataSource.{{column.name}} = value; 
				databaseModel.Notify{{dto}}RowChanged(dataSource,nameof({{column.name}}), oldValue,value ); 
				OnPropertyChanged(nameof({{column.name}})); 
				{{- foreignkeyattribute = column.attributes | find "ForeignKey"}}
				{{- if foreignkeyattribute -}}
				{{- parameter= foreignkeyattribute.parameters | find "ForeignPropertyName"}}
				On{{parameter.value}}Changed();
				{{- end }}
			}
		}		
		{{- end }}


		
		public {{class.name}}({{databaseModel.name}} DatabaseModel,Tables.{{dto}} DataSource)
		{
			this.databaseModel=DatabaseModel;
			this.dataSource=DataSource;

			{{-for groupedrelation in GetRelations | where_is_primary | group_by_foreign_table }}
			// register foreign table {{groupedrelation.ForeignTable}} events
			this.databaseModel.{{groupedrelation.ForeignTable}}TableChanging += On{{groupedrelation.ForeignTable}}TableChanging;
			this.databaseModel.{{groupedrelation.ForeignTable}}TableChanged += On{{groupedrelation.ForeignTable}}TableChanged;
			this.databaseModel.{{groupedrelation.ForeignTable}}RowChanging += On{{groupedrelation.ForeignTable}}RowChanging;
			this.databaseModel.{{groupedrelation.ForeignTable}}RowChanged += On{{groupedrelation.ForeignTable}}RowChanged;
			{{-end}}

		}
					
		public bool IsModelOf(Tables.{{dto}} Item)
		{
			return (Item==dataSource);
		}
			
		

		protected virtual void OnPropertyChanged(string PropertyName)
		{
			if( PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
		}

		{{- primarykey = class.properties | with_attribute "PrimaryKey" | array.first }}
		{{- if primarykey }}
		public void Delete()
		{
			this.databaseModel.Remove{{dto}}(this);
		}
		{{- end }}

		{{-for relation in GetRelations | where_is_foreign }}

		{{- if relation.ForeignKeyIsNullable }}
		protected virtual void On{{relation.ForeignPropertyName}}Changed()
		{
			if ({{relation.ForeignPropertyName}}Changed!=null) {{relation.ForeignPropertyName}}Changed(this, EventArgs.Empty);
		}
		#nullable enable
		// 1- Get primary items from relation {{relation.ForeignTable}}.{{relation.ForeignKey}} -> {{relation.PrimaryTable}}.{{relation.PrimaryKey}} 
		public {{relation.PrimaryTable}}Model? Get{{relation.ForeignPropertyName}}()
		{
			if ({{relation.ForeignKey}} is null) return null;
			return databaseModel.Get{{relation.PrimaryTable}}(item=>item.{{relation.PrimaryKey}} == {{relation.ForeignKey}});
		}
		#nullable disable
		{{-	else }}
		protected virtual void On{{relation.ForeignPropertyName}}Changed()
		{
			if ({{relation.ForeignPropertyName}}Changed!=null) {{relation.ForeignPropertyName}}Changed(this, EventArgs.Empty);
		}
		// 2- Get primary item from relation {{relation.ForeignTable}}.{{relation.ForeignKey}} -> {{relation.PrimaryTable}}.{{relation.PrimaryKey}} 
		public {{relation.PrimaryTable}}Model Get{{relation.ForeignPropertyName}}()
		{
			return databaseModel.Get{{relation.PrimaryTable}}(item=>item.{{relation.PrimaryKey}} == {{relation.ForeignKey}});
		}
		{{-end}}
		{{-end}}

		{{-for relation in GetRelations | where_is_primary }}
		// 3- Get foreign items from relation {{relation.ForeignTable}}.{{relation.ForeignKey}} -> {{relation.PrimaryTable}}.{{relation.PrimaryKey}} 
		public IEnumerable<{{relation.ForeignTable}}Model> Get{{relation.PrimaryPropertyName}}()
		{
			return databaseModel.Get{{relation.ForeignTable}}Table(item=>item.{{relation.ForeignKey}} == {{relation.PrimaryKey}});
		}
		{{-end}}

		{{-for groupedrelation in GetRelations | where_is_primary | group_by_foreign_table }}
		// 4- Handle events of foreign table {{groupedrelation.ForeignTable}} 
		private void On{{groupedrelation.ForeignTable}}RowChanging(Tables.{{groupedrelation.ForeignTable}} Item,string PropertyName, object OldValue, object NewValue)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when {{relation.ForeignKey}} is changing
			if ((PropertyName == "{{relation.ForeignKey}}") && ValueType.Equals(OldValue, dataSource.{{relation.PrimaryKey}}) && !ValueType.Equals(NewValue,OldValue) && ({{relation.PrimaryPropertyName}}Changed!=null)  )
			{		
				int index;
				index=DataLib.EnumerableExtensions.FirstIndexMatch(Get{{relation.PrimaryPropertyName}}(),model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, DataLib.TableChangedActions.Remove, index);
			}
			{{-end}}
		}
		private void On{{groupedrelation.ForeignTable}}RowChanged(Tables.{{groupedrelation.ForeignTable}} Item,string PropertyName, object OldValue, object NewValue)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when {{relation.ForeignKey}} is changed
			if ((PropertyName == "{{relation.ForeignKey}}") && ValueType.Equals(NewValue, dataSource.{{relation.PrimaryKey}}) && !ValueType.Equals(NewValue,OldValue) && ({{relation.PrimaryPropertyName}}Changed!=null)  )
			{		
				int index;
				index=DataLib.EnumerableExtensions.FirstIndexMatch(Get{{relation.PrimaryPropertyName}}(),model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, DataLib.TableChangedActions.Add, index);
			}
			{{-end}}
		}
		private void On{{groupedrelation.ForeignTable}}TableChanging(Tables.{{groupedrelation.ForeignTable}} Item,DataLib.TableChangedActions Action, int Index)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when new item is adding in foreign table {{relation.ForeignTable}}
			if ((Item.{{relation.ForeignKey}} == dataSource.{{relation.PrimaryKey}}) && ({{relation.PrimaryPropertyName}}Changed!=null) && (Action==DataLib.TableChangedActions.Remove) )
			{		
				int index;
				index=DataLib.EnumerableExtensions.FirstIndexMatch(Get{{relation.PrimaryPropertyName}}(),model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, DataLib.TableChangedActions.Remove, index);
			}
			{{-end}}
		}
		private void On{{groupedrelation.ForeignTable}}TableChanged(Tables.{{groupedrelation.ForeignTable}} Item,DataLib.TableChangedActions Action, int Index)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when new item is added in foreign table {{relation.ForeignTable}}
			if ((Item.{{relation.ForeignKey}} == dataSource.{{relation.PrimaryKey}}) && ({{relation.PrimaryPropertyName}}Changed!=null) && (Action==DataLib.TableChangedActions.Add) )
			{		
				int index;
				index=DataLib.EnumerableExtensions.FirstIndexMatch(Get{{relation.PrimaryPropertyName}}(),model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, DataLib.TableChangedActions.Add, index);
			}
			{{-end}}
		}
		{{-end}}

		public override string ToString()
		{
			return dataSource.ToString();
		}
	}
}