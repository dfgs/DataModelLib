{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end }}
// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{


		{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
		{{- if dtoAttribute}}
		{{- mockCount = GetMockCount class }}
		{{-primaryKey=class.properties | with_attribute "PrimaryKey" | array.first}}
		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
		#region {{tableName}} table
		{{-if primaryKey}}
		
		[TestMethod]
		public void ShouldDelete()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());

			// delete last item
			testDatabaseModel.Get{{tableName}}({{mockCount}}).Delete();
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount-1}}, models.Length);
			Assert.AreEqual(1, models[0].{{primaryKey.name}});
		}

		[TestMethod]
		public void ShouldRaiseTableChangingOnDelete()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			{{tableName}}? changedItem = null;
			DataModelLib.TableChangedActions? changedAction = null;
			#nullable disable

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseModel.{{tableName}}TableChanging += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index; ; };

			// delete last item
			testDatabaseModel.Get{{tableName}}({{mockCount}}).Delete();
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount-1}}, models.Length);
	
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataModelLib.TableChangedActions.Remove, changedAction);
			Assert.AreEqual({{mockCount-1}}, changedIndex);
		}

		[TestMethod]
		public void ShouldRaiseTableChangedOnDelete()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			{{tableName}}? changedItem = null;
			DataModelLib.TableChangedActions? changedAction = null;
			#nullable disable

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			testDatabaseModel.{{tableName}}TableChanged += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index; ; };

			// delete last item
			testDatabaseModel.Get{{tableName}}({{mockCount}}).Delete();
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount-1}}, models.Length);
	
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataModelLib.TableChangedActions.Remove, changedAction);
			Assert.AreEqual({{mockCount-1}}, changedIndex);
		}
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
		

		#endregion
		{{- end }}

		

	}
}
