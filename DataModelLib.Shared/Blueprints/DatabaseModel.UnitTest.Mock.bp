{{- func FindUnitTestClass

	for tmptable in project.classes  | with_attribute "TableAttribute"
		dtoAttribute = tmptable.attributes | find "DTOAttribute"
		if dtoAttribute
			tmptableName=(dtoAttribute.parameters | find "Name").value
			if tmptableName==$0 
				ret tmptable
			end
		end
	end

	ret nil
end }}

{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end }}

// <auto-generated/>
using System;
using System.Collections.Generic;


namespace {{class.namespace}}
{

	
	{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
	{{- if dtoAttribute}}
	{{- testedClass=(dtoAttribute.parameters | find "Name").value }}
	{{- else }}
	{{- testedClass="Undefined"}}
	{{- end }}

	public static class MockDatabase
	{
		{{ for table in project.classes  | with_attribute "TableAttribute"}}
		{{- dtoAttribute = table.attributes | find "DTOAttribute"  }}
		{{- if dtoAttribute}}
		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
	
		{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
		{{-if primaryKey}}
		
		{{- PrimaryKeyCount = GetMockCount table }}
		private static {{primaryKey.type_name}} GenerateForeignIDTo{{tableName}}({{primaryKey.type_name}} ForeignItemIndex)
		{
			return (byte)((ForeignItemIndex-1) % {{PrimaryKeyCount}} +1);
		}
		private static {{primaryKey.type_name}}? GenerateNullableForeignIDTo{{tableName}}({{primaryKey.type_name}} ForeignItemIndex)
		{
			{{primaryKey.type_name}} id;

			id = (byte)((ForeignItemIndex-1) % {{PrimaryKeyCount+1}} +1);
			if (id == {{PrimaryKeyCount+1}}) return null;

			return id;
		}

		public static {{tableName}} Create{{tableName}}({{primaryKey.type_name}} {{primaryKey.name}})
		{
			return new {{tableName}}()
				{
					{{- for property in table.properties}}
						{{- primaryTableName=((property.attributes | find "ForeignKey")?.parameters | find "PrimaryTable")?.value }}
						
						{{- if property.name == primaryKey.name}}
					{{property.name}} = {{primaryKey.name}}, // unique PK
						
						{{- else if primaryTableName}}
							{{- primaryTable = FindUnitTestClass primaryTableName }}
							{{- isNullable = property.is_nullable }}
							{{- if isNullable}}
					{{property.name}} = GenerateNullableForeignIDTo{{primaryTableName}}({{primaryKey.name}}) , // foreign property to table {{primaryTableName}}
							{{-else}}
					{{property.name}} = GenerateForeignIDTo{{primaryTableName}}({{primaryKey.name}}) , // foreign property to table {{primaryTableName}}
							{{-end}}
						{{- else if property.type_name=="string"}}
					{{property.name}} = $"{{property.name}}{%{{}%}{{primaryKey.name}}{%{}}%}",
						
						{{-else}}
					{{property.name}} = {{primaryKey.name}},
						
						{{- end}}
					{{- end}}
				};
		}		
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}

		
		{{- end }}
		{{- end }}


		public static {{testedClass}} Create()
		{
			{{testedClass}} testDatabase = new {{testedClass}}();

			{{ for table in project.classes  | with_attribute "TableAttribute"}}
			{{- dtoAttribute = table.attributes | find "DTOAttribute"  }}
			{{- if dtoAttribute}}
		
			{{- tableName=(dtoAttribute.parameters | find "Name").value }}
			#region Populate {{tableName}} table
			{{- mockCount = GetMockCount table }}
			{{- for index in 1..mockCount }}
			testDatabase.{{tableName}}Table.Add(Create{{tableName}}({{index}}));				
			{{- end }}
			#endregion

			{{end }}
			{{- end }}

			
			return testDatabase;		
		}
		

		

	}
}