{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- func FindUnitTestClass

	for tmptable in project.classes  | with_attribute "TableUnitTestAttribute"
		dtoAttribute = tmptable.attributes | find "DTOAttribute"
		if dtoAttribute
			tmptableName=(dtoAttribute.parameters | find "Name").value
			if tmptableName==$0 
				ret tmptable
			end
		end
	end

	ret null
end -}}
{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- databaseName=class | GetDTO }}

{{- -}}
// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}
{{-for usingAttribute in class.attributes | with_name "UsingAttribute" }}
using {{(usingAttribute.parameters | find "Namespace").value}};
{{-end}}

namespace {{class.namespace}}
{
	public static class MockDatabase
	{
		{{ for tableClass in project.classes  | with_attribute "TableUnitTestAttribute"}}
		
		{{- dto=tableClass | GetDTO }}

		{{-primaryKey=tableClass.properties | with_attribute "PrimaryKey" | array.first}}
		{{-if primaryKey}}
	
		{{- PrimaryKeyCount = GetMockCount tableClass }}
		private static {{primaryKey.type_name}} GenerateForeignIDTo{{dto}}({{primaryKey.type_name}} ForeignItemIndex)
		{
			return (byte)((ForeignItemIndex-1) % {{PrimaryKeyCount}} +1);
		}
		private static {{primaryKey.type_name}}? GenerateNullableForeignIDTo{{dto}}({{primaryKey.type_name}} ForeignItemIndex)
		{
			{{primaryKey.type_name}} id;

			id = (byte)((ForeignItemIndex-1) % {{PrimaryKeyCount+1}} +1);
			if (id == {{PrimaryKeyCount+1}}) return null;

			return id;
		}

		public static Tables.{{dto}} Create{{dto}}({{primaryKey.type_name}} {{primaryKey.name}})
		{
			return new Tables.{{dto}}()
				{
					{{- for property in tableClass.properties}}
						{{- primaryTableName=((property.attributes | find "ForeignKey")?.parameters | find "PrimaryTable")?.value }}
					
						{{- if property.name == primaryKey.name}}
					{{property.name}} = {{primaryKey.name}}, // unique PK
					
						{{- else if primaryTableName}}
							{{- primaryTable = FindUnitTestClass primaryTableName }}
							{{- isNullable = property.is_nullable }}
							{{- if isNullable}}
					{{property.name}} = GenerateNullableForeignIDTo{{primaryTableName}}({{primaryKey.name}}) , // foreign property to table {{primaryTableName}}
							{{-else}}
					{{property.name}} = GenerateForeignIDTo{{primaryTableName}}({{primaryKey.name}}) , // foreign property to table {{primaryTableName}}
							{{-end}}
						{{- else if property.type_name=="bool"}}
					{{property.name}} = false,
						{{- else if property.type_name=="string"}}
					{{property.name}} = $"{{property.name}}{%{{}%}{{primaryKey.name}}{%{}}%}",
					
						{{-else}}
					{{property.name}} = {{primaryKey.name}},
					
						{{- end}}
					{{- end}}
				};
		}		
		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}

	
		{{- end }}


		public static Tables.{{databaseName}} Create()
		{
			Tables.{{databaseName}} testDatabase = new Tables.{{databaseName}}();
			
			{{ for table in project.classes  | with_attribute "TableUnitTestAttribute"}}
			{{dto = table | GetDTO}}
			{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
			{{-if primaryKey}}
			#region Populate {{dto}} table
			{{- mockCount = GetMockCount table }}
			{{- for index in 1..mockCount }}
			testDatabase.{{dto}}Table.Add(Create{{dto}}({{index}}));				
			{{- end }}
			#endregion

			{{end }}
			{{- end }}
			

		
			return testDatabase;		
		}
	

	}
	
}