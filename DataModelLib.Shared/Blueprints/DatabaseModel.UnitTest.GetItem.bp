{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end }}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}




namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		{{ for table in project.classes  | with_attribute "TableAttribute"}}
		{{- dtoAttribute = table.attributes | find "DTOAttribute"  }}
		{{- if dtoAttribute}}
		{{- mockCount = GetMockCount table }}
		{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
		#region {{tableName}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldGet{{tableName}}ByPK()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model model;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());

			model = testDatabaseModel.Get{{tableName}}(1);
			Assert.AreEqual(1, model.{{primaryKey.name}});
		}
				
		[TestMethod]
		public void ShouldGet{{tableName}}ByPredicate()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model model;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());

			model = testDatabaseModel.Get{{tableName}}(item => item.{{primaryKey.name}} == 1);
			Assert.AreEqual(1, model.{{primaryKey.name}});
		}
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}
		#endregion
		{{- end }}
		{{end }}


	}
}
