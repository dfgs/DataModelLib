{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- databaseModels = (project.classes  | with_attribute "DatabaseModelAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}




namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		{{ for tableClass in project.classes  | with_attribute "TableUnitTestAttribute"}}
		{{- dto= tableClass | GetDTO }}
		{{- mockCount = GetMockCount tableClass }}
		{{-primaryKey=tableClass.properties | with_attribute "PrimaryKey" | array.first}}
		
#region {{dto}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldGet{{dto}}ByPK()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());

			model = testDatabaseModel.Get{{dto}}(1);
			Assert.AreEqual(1, model.{{primaryKey.name}});
		}
				
		[TestMethod]
		public void ShouldGet{{dto}}ByPredicate()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model model;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());

			model = testDatabaseModel.Get{{dto}}(item => item.{{primaryKey.name}} == 1);
			Assert.AreEqual(1, model.{{primaryKey.name}});
		}
		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}
#endregion
		{{- end }}


	}
}
