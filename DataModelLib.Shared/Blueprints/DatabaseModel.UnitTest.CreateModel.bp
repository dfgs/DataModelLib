{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end }}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}




namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
		{{ for table in project.classes  | with_attribute "TableAttribute"}}
		{{- dtoAttribute = table.attributes | find "DTOAttribute"  }}
		{{- if dtoAttribute}}
		

		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
		#region {{tableName}} table
		
		[TestMethod]
		public void ShouldNotCreateUnique{{tableName}}Model()
		{
			Models.TestDatabaseModel testDatabaseModel;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			
			Assert.ThrowsException<ArgumentNullException>(()=> testDatabaseModel.Create{{tableName}}Model(null));
		}

		/*
		[TestMethod]
		public void ShouldGet{{tableName}}TableByPredicate()
		{
			Models.TestDatabaseModel testDatabaseModel;
			Models.{{tableName}}Model[] models;

			testDatabaseModel = new Models.TestDatabaseModel(MockDatabase.Create());
			
			{{-primaryKey=table.properties | with_attribute "PrimaryKey" | array.first}}
			{{-if primaryKey}}
			// check if we can get table items using predicate based on primary key
			models = testDatabaseModel.Get{{tableName}}Table(item => item.{{primaryKey.name}} == 1).ToArray();
			Assert.AreEqual(1, models.Length);
			Assert.AreEqual(1, models[0].{{primaryKey.name}});
			{{-else}}
			Assert.Fail("No primary key defined")
			{{-end}}
		}
		*/

		#endregion
		{{- end }}
		{{end }}


	}
}
