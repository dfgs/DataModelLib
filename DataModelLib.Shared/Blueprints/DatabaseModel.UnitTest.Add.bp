{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}


{{- dtoAttribute = class.attributes | find "DTOAttribute"  }}
{{- if !dtoAttribute}}
#warning no DTO attribute was set on unit test class {{class.name}}
{{-ret}}
{{-end}}
{{- databaseName=(dtoAttribute.parameters | find "Name").value }}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
	
		{{ for tableClass in project.classes  | with_attribute "TableAttribute"}}
		{{- dtoAttribute = tableClass.attributes | find "DTOAttribute"}}
		{{- if !dtoAttribute}}
		#warning no DTO attribute was set on unit test class {{tableClass.name}}
		{{- continue -}}
		{{- end}}
		{{- tableName=(dtoAttribute.parameters | find "Name").value }}
		
		{{- mockCount = GetMockCount tableClass }}
		{{- primaryKey=tableClass.properties | with_attribute "PrimaryKey" | array.first }}
		
#region {{tableName}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldAdd{{tableName}}()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model[] models;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());

			testDatabaseModel.Add{{tableName}}(MockDatabase.Create{{tableName}}({{mockCount+1}}));
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount+1}}, models.Length);

			// check if returned PKs are correct for each item
			for({{primaryKey.type_name}} index=1;index<={{mockCount+1}};index++ )
			{
				Assert.AreEqual(index, models[index-1].{{primaryKey.name}});
			}
		}

		[TestMethod]
		public void ShouldNotAdd{{tableName}}Twice()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model[] models;
			{{tableName}} new{{tableName}};

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());

			new{{tableName}} = MockDatabase.Create{{tableName}}({{mockCount+1}});

			// item should be added once
			testDatabaseModel.Add{{tableName}}(new{{tableName}});
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount+1}}, models.Length);

			// item should not be added a second time
			testDatabaseModel.Add{{tableName}}(new{{tableName}});
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
			Assert.AreEqual({{mockCount+1}}, models.Length);
		}

		[TestMethod]
		public void ShouldRaise{{tableName}}TableChangingOnAdd()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			{{tableName}}? changedItem = null;
			DataModelLib.TableChangedActions? changedAction = null;
			#nullable disable

	
			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			testDatabaseModel.{{tableName}}TableChanging += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index;  };

			testDatabaseModel.Add{{tableName}}(MockDatabase.Create{{tableName}}({{mockCount+1}}));
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
	
			Assert.AreEqual({{mockCount+1}}, models.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount+1}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataModelLib.TableChangedActions.Add, changedAction);
			Assert.AreEqual({{mockCount}}, changedIndex);
		}

		[TestMethod]
		public void ShouldRaise{{tableName}}TableChangedOnAdd()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{tableName}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			{{tableName}}? changedItem = null;
			DataModelLib.TableChangedActions? changedAction = null;
			#nullable disable

	
			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			testDatabaseModel.{{tableName}}TableChanged += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index;  };

			testDatabaseModel.Add{{tableName}}(MockDatabase.Create{{tableName}}({{mockCount+1}}));
			models = testDatabaseModel.Get{{tableName}}Table().ToArray();
	
			Assert.AreEqual({{mockCount+1}}, models.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount+1}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataModelLib.TableChangedActions.Add, changedAction);
			Assert.AreEqual({{mockCount}}, changedIndex);
		}
		{{-else}}
		#warning No primary key defined for table {{tableName}}
		{{-end}}		
#endregion
		{{-end }}
	}
}