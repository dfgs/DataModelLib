{{- func GetMockCount
	ret (($0.attributes | find "MockCountAttribute")?.parameters | find "Value")?.value??"5" | string.to_int
end -}}

{{- func GetDTO }}
	{{- localDTOAttribute = $0.attributes | find "DTOAttribute" }}
	{{- if !localDTOAttribute}}
		#warning no DTO attribute was set on table model class {{$0}}
		{{-ret null}}
	{{-end}}
	{{-localDTO=(localDTOAttribute.parameters | find "Name").value}}
	{{-ret localDTO}}
{{-end }}

{{- databaseModels = (project.classes  | with_attribute "DatabaseUnitTestAttribute") }}
{{- databaseModel = databaseModels | array.first }}
{{- if !databaseModel  }}
#warning no DatabaseModel attribute defined in database model class
{{-ret}}
{{-end}}
{{databaseName = databaseModel | GetDTO}}

{{- -}}

// <auto-generated/>
using System;
using System.Collections.Generic;
{{- for reference in project.references }}
using {{reference}};
{{-end}}

namespace {{class.namespace}}
{
	public partial class {{class.name}}
	{
	
		{{ for tableClass in project.classes  | with_attribute "TableUnitTestAttribute"}}
		{{- dto= tableClass | GetDTO }}
		{{- mockCount = GetMockCount tableClass }}
		{{-primaryKey=tableClass.properties | with_attribute "PrimaryKey" | array.first}}
		
	#region {{dto}} table
		{{-if primaryKey}}
		[TestMethod]
		public void ShouldAdd{{dto}}()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model[] models;

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());

			testDatabaseModel.Add{{dto}}(MockDatabase.Create{{dto}}({{mockCount+1}}));
			models = testDatabaseModel.Get{{dto}}Table().ToArray();
			Assert.AreEqual({{mockCount+1}}, models.Length);

			// check if returned PKs are correct for each item
			for({{primaryKey.type_name}} index=1;index<={{mockCount+1}};index++ )
			{
				Assert.AreEqual(index, models[index-1].{{primaryKey.name}});
			}
		}

		[TestMethod]
		public void ShouldNotAdd{{dto}}Twice()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model[] models;
			Tables.{{dto}} new{{dto}};

			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());

			new{{dto}} = MockDatabase.Create{{dto}}({{mockCount+1}});

			// item should be added once
			testDatabaseModel.Add{{dto}}(new{{dto}});
			models = testDatabaseModel.Get{{dto}}Table().ToArray();
			Assert.AreEqual({{mockCount+1}}, models.Length);

			// item should not be added a second time
			testDatabaseModel.Add{{dto}}(new{{dto}});
			models = testDatabaseModel.Get{{dto}}Table().ToArray();
			Assert.AreEqual({{mockCount+1}}, models.Length);
		}

		[TestMethod]
		public void ShouldRaise{{dto}}TableChangingOnAdd()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			Tables.{{dto}}? changedItem = null;
			DataLib.TableChangedActions? changedAction = null;
			#nullable disable

	
			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			testDatabaseModel.{{dto}}TableChanging += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index;  };

			testDatabaseModel.Add{{dto}}(MockDatabase.Create{{dto}}({{mockCount+1}}));
			models = testDatabaseModel.Get{{dto}}Table().ToArray();
	
			Assert.AreEqual({{mockCount+1}}, models.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount+1}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataLib.TableChangedActions.Add, changedAction);
			Assert.AreEqual({{mockCount}}, changedIndex);
		}

		[TestMethod]
		public void ShouldRaise{{dto}}TableChangedOnAdd()
		{
			Models.{{databaseName}}Model testDatabaseModel;
			Models.{{dto}}Model[] models;
			int changedIndex = -1;
			#nullable enable
			Tables.{{dto}}? changedItem = null;
			DataLib.TableChangedActions? changedAction = null;
			#nullable disable

	
			testDatabaseModel = new Models.{{databaseName}}Model(MockDatabase.Create());
			testDatabaseModel.{{dto}}TableChanged += (item, action, index) => { changedItem = item; changedAction = action; changedIndex = index;  };

			testDatabaseModel.Add{{dto}}(MockDatabase.Create{{dto}}({{mockCount+1}}));
			models = testDatabaseModel.Get{{dto}}Table().ToArray();
	
			Assert.AreEqual({{mockCount+1}}, models.Length);
			Assert.IsNotNull(changedItem);
			Assert.AreEqual({{mockCount+1}}, changedItem.{{primaryKey.name}});
			Assert.AreEqual(DataLib.TableChangedActions.Add, changedAction);
			Assert.AreEqual({{mockCount}}, changedIndex);
		}
		{{-else}}
		#warning No primary key defined for table {{dto}}
		{{-end}}		
#endregion
		{{-end }}
	}
}