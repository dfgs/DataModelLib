using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Collections.Generic;
using System.Text;

namespace DataModelLib.DataModels
{
	public class TableModel : DataModel
	{

		public string Namespace { get; private set; }
		public string DatabaseClassName { get; private set; }
		public string TableClassName { get; private set; }
		public string TableName { get; private set; }



		public TableModel(string Namespace, string DatabaseClassName, string ClassName,string TableName) : base()
		{
			this.Namespace = Namespace; this.DatabaseClassName = DatabaseClassName; this.TableClassName= ClassName;this.TableName = TableName;
		}
		public string GenerateDatabaseProperties()
		{
			string source =
			$$"""
			public List<{{TableClassName}}> {{TableName}} {get;set;}
			""";

			return source;
		}
		public string GenerateDatabaseConstructor()
		{
			string source =
			$$"""
			{{TableName}} = new List<{{TableClassName}}>();
			""";

			return source;
		}

		public string GenerateDatabaseModelMethods()
		{
			string source =
			$$"""
			public IEnumerable<{{TableClassName}}Model> Get{{TableName}}()
			{
				return dataSource.{{TableName}}.Select(item=>new {{TableClassName}}Model(this, item));
			}

			public void AddTo{{TableName}}({{TableClassName}}Model Item)
			{
				dataSource.{{TableName}}.Add(Item.DataSource);
			}
			public void AddTo{{TableName}}({{TableClassName}} Item)
			{
				dataSource.{{TableName}}.Add(Item);
			}
			public void RemoveFrom{{TableName}}({{TableClassName}}Model Item)
			{
				dataSource.{{TableName}}.Remove(Item.DataSource);
			}
			""";

			return source;
		}

		public string GenerateTableModelClass()
		{
			string source =
			$$"""
			// <auto-generated/>
			using System;
			using System.Collections.Generic;

			namespace {{Namespace}}
			{
				public partial class {{TableClassName}}Model
				{
					public {{TableClassName}} DataSource
					{
						get;
						private set;
					}

					private {{DatabaseClassName}}Model databaseModel;
			
			{{this.GenerateTableModelConstructor().Indent(2)}}
			{{this.GenerateTableModelMethods().Indent(2)}}
						
				}
			}
			""";

			return source;
		}
		public string GenerateTableModelConstructor()
		{
			string source =
			$$"""
			public {{TableClassName}}Model({{DatabaseClassName}}Model DatabaseModel, {{TableClassName}} DataSource)
			{
				this.databaseModel=DatabaseModel;
				this.DataSource=DataSource;
			}
			""";

			return source;
		}

		public string GenerateTableModelMethods()
		{
			string source =
			$$"""
			public void Delete()
			{
				this.databaseModel.RemoveFrom{{TableName}}(this);
			}
			""";

			return source;
		}

	}
}
