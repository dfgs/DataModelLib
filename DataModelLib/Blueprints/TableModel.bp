{{- func GetRelations
	result = []

	for foreignclass in project.classes
		for property in foreignclass.properties
			attribute = property.attributes | find_attribute "ForeignKeyAttribute"
			if attribute
				isnullable = property.type_name | string.ends_with "?"

				relation = { 
					ForeignTable: foreignclass.name,
					ForeignKey: property.name,
					ForeignPropertyName: (attribute.parameters | find_parameter "ForeignPropertyName").value, 
					ForeignKeyIsNullable: isnullable,
					PrimaryPropertyName: (attribute.parameters | find_parameter "PrimaryPropertyName").value, 
					PrimaryTable: (attribute.parameters | find_parameter "PrimaryTable").value, 
					PrimaryKey: (attribute.parameters | find_parameter "PrimaryKey").value, 
					CascadeTrigger: (attribute.parameters | find_parameter "CascadeTrigger").value 
				} 
				result = result + [relation]
			end
		end
	end

	ret result
end }}

{{- func where_is_primary
	result = []

	for relation in $0
		if relation.PrimaryTable==class.name
			result = result + [relation]
		end
	end

	ret result
end }}

{{- func where_is_foreign
	result = []

	for relation in $0
		if relation.ForeignTable==class.name
			result = result + [relation]
		end
	end

	ret result
end }}

{{- func group_by_foreign_table
	result = []

	for relation in $0
		
		groupedrelation=nil
		for item in result
			if item.ForeignTable == relation.ForeignTable
				groupedrelation=item
			end
		end
		if groupedrelation==null 
			groupedrelation = {
				ForeignTable: relation.ForeignTable,
				Relations: []
			}
			result = result + [groupedrelation]
		end
		groupedrelation.Relations = groupedrelation.Relations + [relation]
		
	end

	ret result
end }}

// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using DataModelLib;

namespace {{class.namespace}}.Models
{
	{{- database = (project.classes  | class_with_attribute "DatabaseAttribute")[0] }}

	public partial class {{class.name}}Model : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
		
		{{-for relation in GetRelations | where_is_primary }}
		public event TableChangedEventHandler<{{relation.ForeignTable}}> {{relation.PrimaryPropertyName}}Changed;
		{{- end }}

		{{-for relation in GetRelations | where_is_foreign }}
		public event EventHandler {{relation.ForeignPropertyName}}Changed;
		{{- end }}

		private {{class.name}} dataSource
		{
			get;
			set;
		}

		private {{database.name}}Model databaseModel;
			
		{{- for column in class.properties | property_with_attribute "ColumnAttribute" }}
		public {{column.type_name}} {{column.name}} 
		{
			get => dataSource.{{column.name}};
			set 
			{
				if (value==dataSource.{{column.name}}) return;
				{{column.type_name}} oldValue=dataSource.{{column.name}}; 
				databaseModel.Notify{{class.name}}RowChanging(dataSource,nameof({{column.name}}), oldValue,value ); 
				dataSource.{{column.name}} = value; 
				databaseModel.Notify{{class.name}}RowChanged(dataSource,nameof({{column.name}}), oldValue,value ); 
				OnPropertyChanged(nameof({{column.name}})); 
				{{- foreignkeyattribute = column.attributes | find_attribute "ForeignKeyAttribute"}}
				{{- if foreignkeyattribute -}}
				{{- parameter= foreignkeyattribute.parameters | find_parameter "ForeignPropertyName"}}
				On{{parameter.value}}Changed();
				{{- end }}
			}
		}		
		{{- end }}


		
		public {{class.name}}Model({{database.name}}Model DatabaseModel,{{class.name}} DataSource)
		{
			this.databaseModel=DatabaseModel;
			this.dataSource=DataSource;

			{{-for groupedrelation in GetRelations | where_is_primary | group_by_foreign_table }}
			// register foreign table {{groupedrelation.ForeignTable}} events
			this.databaseModel.{{groupedrelation.ForeignTable}}TableChanging += On{{groupedrelation.ForeignTable}}TableChanging;
			this.databaseModel.{{groupedrelation.ForeignTable}}TableChanged += On{{groupedrelation.ForeignTable}}TableChanged;
			this.databaseModel.{{groupedrelation.ForeignTable}}RowChanging += On{{groupedrelation.ForeignTable}}RowChanging;
			this.databaseModel.{{groupedrelation.ForeignTable}}RowChanged += On{{groupedrelation.ForeignTable}}RowChanged;
			{{-end}}

		}
					
		public bool IsModelOf({{class.name}} Item)
		{
			return (Item==dataSource);
		}
			
		

		protected virtual void OnPropertyChanged(string PropertyName)
		{
			if( PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
		}






		{{- if !(class.attributes | contains_attribute "PrimaryKeyAttribute") }}
		public void Delete()
		{
			this.databaseModel.Remove{{class.name}}(this);
		}
		{{- end }}

		{{-for relation in GetRelations | where_is_foreign }}

		{{- if relation.ForeignKeyIsNullable }}
		protected virtual void On{{relation.ForeignPropertyName}}Changed()
		{
			if ({{relation.ForeignPropertyName}}Changed!=null) {{relation.ForeignPropertyName}}Changed(this, EventArgs.Empty);
		}
		#nullable enable
		// 1- Get primary items from relation {{relation.ForeignTable}}.{{relation.ForeignKey}} -> {{relation.PrimaryTable}}.{{relation.PrimaryKey}} 
		public {{relation.PrimaryTable}}Model? Get{{relation.ForeignPropertyName}}()
		{
			if ({{relation.ForeignKey}} is null) return null;
			return databaseModel.Get{{relation.PrimaryTable}}(item=>item.{{relation.PrimaryKey}} == {{relation.ForeignKey}});
		}
		#nullable disable
		{{-	else }}
		protected virtual void On{{relation.ForeignPropertyName}}Changed()
		{
			if ({{relation.ForeignPropertyName}}Changed!=null) {{relation.ForeignPropertyName}}Changed(this, EventArgs.Empty);
		}
		// 2- Get primary item from relation {{relation.ForeignTable}}.{{relation.ForeignKey}} -> {{relation.PrimaryTable}}.{{relation.PrimaryKey}} 
		public {{relation.PrimaryTable}}Model Get{{relation.ForeignPropertyName}}()
		{
			return databaseModel.Get{{relation.PrimaryTable}}(item=>item.{{relation.PrimaryKey}} == {{relation.ForeignKey}});
		}
		{{-end}}
		{{-end}}

		{{-for relation in GetRelations | where_is_primary }}
		// 3- Get foreign items from relation {{relation.ForeignTable}}.{{relation.ForeignKey}} -> {{relation.PrimaryTable}}.{{relation.PrimaryKey}} 
		public IEnumerable<{{relation.ForeignTable}}Model> Get{{relation.PrimaryPropertyName}}()
		{
			return databaseModel.Get{{relation.ForeignTable}}Table(item=>item.{{relation.ForeignKey}} == {{relation.PrimaryKey}});
		}
		{{-end}}

		

		{{-for groupedrelation in GetRelations | where_is_primary | group_by_foreign_table }}
		// 4- Handle events of foreign table {{relation.ForeignTable}} 
		private void On{{groupedrelation.ForeignTable}}RowChanging({{relation.ForeignTable}} Item,string PropertyName, object OldValue, object NewValue)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when {{relation.ForeignKey}} is changing
			if ((PropertyName == "{{relation.ForeignKey}}") && ValueType.Equals(OldValue, dataSource.{{relation.PrimaryKey}}) && !ValueType.Equals(NewValue,OldValue) && ({{relation.PrimaryPropertyName}}Changed!=null)  )
			{		
				int index;
				index=Get{{relation.PrimaryPropertyName}}().FirstIndexMatch(model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, TableChangedActions.Remove, index);
			}
			{{-end}}
		}
		private void On{{groupedrelation.ForeignTable}}RowChanged({{relation.ForeignTable}} Item,string PropertyName, object OldValue, object NewValue)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when {{relation.ForeignKey}} is changed
			if ((PropertyName == "{{relation.ForeignKey}}") && ValueType.Equals(NewValue, dataSource.{{relation.PrimaryKey}}) && !ValueType.Equals(NewValue,OldValue) && ({{relation.PrimaryPropertyName}}Changed!=null)  )
			{		
				int index;
				index=Get{{relation.PrimaryPropertyName}}().FirstIndexMatch(model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, TableChangedActions.Add, index);
			}
			{{-end}}
		}
		private void On{{groupedrelation.ForeignTable}}TableChanging({{relation.ForeignTable}} Item,TableChangedActions Action, int Index)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when new item is adding in foreign table {{relation.ForeignTable}}
			if ((Item.{{relation.ForeignKey}} == dataSource.{{relation.PrimaryKey}}) && ({{relation.PrimaryPropertyName}}Changed!=null) && (Action==TableChangedActions.Remove) )
			{		
				int index;
				index=Get{{relation.PrimaryPropertyName}}().FirstIndexMatch(model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, TableChangedActions.Remove, index);
			}
			{{-end}}
		}
		private void On{{relation.ForeignTable}}TableChanged({{relation.ForeignTable}} Item,TableChangedActions Action, int Index)
		{
			{{-for relation in groupedrelation.Relations }}
			// Handle event for collection {{relation.PrimaryPropertyName}}, when new item is added in foreign table {{relation.ForeignTable}}
			if ((Item.{{relation.ForeignKey}} == dataSource.{{relation.PrimaryKey}}) && ({{relation.PrimaryPropertyName}}Changed!=null) && (Action==TableChangedActions.Add) )
			{		
				int index;
				index=Get{{relation.PrimaryPropertyName}}().FirstIndexMatch(model => model.IsModelOf(Item));
				{{relation.PrimaryPropertyName}}Changed(Item, TableChangedActions.Add, index);
			}
			{{-end}}
		}
		{{-end}}


		
		


		public override string ToString()
		{
			return dataSource.ToString();
		}
	}
}