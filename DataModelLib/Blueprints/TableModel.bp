// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using DataModelLib.Common;

namespace {{class.namespace}}.Models
{
	{%- assign database = (project.classes  | class_with_attribute "DatabaseAttribute")[0] %}

	public partial class {{class.name}}Model : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
		// {Table.Relations.Where(item => item.ForeignTable != Table).Select(item => $"public event TableChangedEventHandler<{item.ForeignTable.TableName}> {item.PrimaryPropertyName}Changed;").Join().Indent(2)}}
		// {Table.Relations.Where(item => (item.ForeignTable == Table) ).Select(item => $"public event EventHandler {item.ForeignPropertyName}Changed;").Join().Indent(2)}}
			
		private {{class.name}} dataSource
		{
			get;
			set;
		}

		private {{database.name}}Model databaseModel;
			
		//{Table.Columns.Select(item => GenerateProperties(Table, item) ).Join().Indent(2)}}
		{%- for column in class.properties | property_with_attribute "ColumnAttribute" %}
		public {{column.type_name}} {{column.name}} 
		{
			get => dataSource.{{column.name}};
			set 
			{
				if (value==dataSource.{{column.name}}) return;
				{{column.type_name}} oldValue=dataSource.{{column.name}}; 
				databaseModel.Notify{{class.name}}RowChanging(dataSource,nameof({{column.name}}), oldValue,value ); 
				dataSource.{{column.name}} = value; 
				databaseModel.Notify{{class.name}}RowChanged(dataSource,nameof({{column.name}}), oldValue,value ); 
				OnPropertyChanged(nameof({{column.name}})); 
				//{Table.Relations.Where(item => (item.ForeignTable == Table) && (item.ForeignKey==Column) ).Select(item => $"On{item.ForeignPropertyName}Changed();").Join().Indent(2)}}
			}
		}		
		{%- endfor %}


		public {{class.name}}Model({{database.name}}Model DatabaseModel,{{class.name}} DataSource)
		{
			this.databaseModel=DatabaseModel;
			this.dataSource=DataSource;
			/*
			{Table.Relations.Where(item => item.ForeignTable != Table).Select(item => item.ForeignTable).Distinct().Select(item => $"this.databaseModel.{item.TableName}TableChanging += On{item.TableName}TableChanging;").Join().Indent(3)}}
			{Table.Relations.Where(item => item.ForeignTable != Table).Select(item => item.ForeignTable).Distinct().Select(item => $"this.databaseModel.{item.TableName}TableChanged += On{item.TableName}TableChanged;").Join().Indent(3)}}
			{Table.Relations.Where(item => item.ForeignTable != Table).Select(item => item.ForeignTable).Distinct().Select(item => $"this.databaseModel.{item.TableName}RowChanging += On{item.TableName}RowChanging;").Join().Indent(3)}}
			{Table.Relations.Where(item => item.ForeignTable != Table).Select(item => item.ForeignTable).Distinct().Select(item => $"this.databaseModel.{item.TableName}RowChanged += On{item.TableName}RowChanged;").Join().Indent(3)}}
			*/
		}
					
		public bool IsModelOf({{class.name}} Item)
		{
			return (Item==dataSource);
		}
			
		// {Table.Relations.Where(item => item.ForeignTable != Table).Select(item => item.ForeignTable).Distinct().Select(item=>GenerateRelationEventHandlers(Table,item)).Join().Indent(2)}}

		protected virtual void OnPropertyChanged(string PropertyName)
		{
			if( PropertyChanged != null) PropertyChanged(this, new PropertyChangedEventArgs(PropertyName));
		}

		//{this.GenerateMethods(Table).Indent(2)}}
		{%- if class.attributes | contains "PrimaryKeyAttribute" %}
		//{ Table.Relations.Select(item => GenerateRelationMethods(item,Table == item.PrimaryTable)).Join()}}
		{%- else %}
		public void Delete()
		{
			this.databaseModel.Remove{{class.name}}(this);
		}
		//{Table.Relations.Select(item => GenerateRelationMethods(item, Table == item.PrimaryTable)).Join()}}
		
		{%- endif %}

		public override string ToString()
		{
			return dataSource.ToString();
		}
	}
}