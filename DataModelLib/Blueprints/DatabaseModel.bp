// <auto-generated/>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using DataModelLib;

namespace {{class.namespace}}.Models
{
	public partial class {{class.name}}Model
	{
		{%- for class in project.classes | class_with_attribute "TableAttribute" %}
		// events definition for table {{class.name}}
		public event TableChangedEventHandler<{{class.name}}> {{class.name}}TableChanging;
		public event TableChangedEventHandler<{{class.name}}> {{class.name}}TableChanged;
		public event RowChangedEventHandler<{{class.name}}> {{class.name}}RowChanging;
		public event RowChangedEventHandler<{{class.name}}> {{class.name}}RowChanged;
		{%- endfor %}

		{%- for class in project.classes | class_with_attribute "TableAttribute" %}
		private Dictionary<{{class.name}},{{class.name}}Model> {{class.name}}Dictionary;
		{%- endfor %}


		private {{class.name}} dataSource;

		public {{class.name}}Model({{class.name}} DataSource)
		{
			this.dataSource=DataSource;

			{%- for class in project.classes | class_with_attribute "TableAttribute" %}
			{{class.name}}Dictionary =  new Dictionary<{{class.name}},{{class.name}}Model> ();
			{%- endfor %}
		}			

		//{Database.Tables.Select(item => GenerateDatabaseModelMethods(item)).Join().Indent(2)}}
		
		{%- for table in project.classes | class_with_attribute "TableAttribute" %}
		{%- assign primarykey = table.properties | first_property_with_attribute "PrimaryKeyAttribute" %}
		{%- if primarykey %}
		// cascadeActions = string.Join("\r\n", Table.Relations.Where(item => item.PrimaryTable == Table).Select(item => GenerateCascadeActions(item)));
		public void Remove{{table.name}}({{table.name}}Model Item)
		{
			#nullable enable
			{{table.name}}? dataSourceItem;
			#nullable disable
			int index;

					
			dataSourceItem=dataSource.{{table.name}}Table.FirstOrDefault(item=>item.{{primarykey.name}} == Item.{{primarykey.name}});
			if (dataSourceItem == null) return;
			index=dataSource.{{table.name}}Table.IndexOf(dataSourceItem);

			if ({{table.name}}TableChanging != null) {{table.name}}TableChanging(dataSourceItem,TableChangedActions.Remove, index);
				
			dataSource.{{table.name}}Table.Remove(dataSourceItem);
				
			//{cascadeActions.Indent(1)}}

			if ({{table.name}}TableChanged != null) {{table.name}}TableChanged(dataSourceItem,TableChangedActions.Remove, index);
		}

		{%- endif %}
		{%- endfor %}

	}
}