using DataModelLib.Common.Schema;
using DataModelLib.Common.SourceGenerator;
using DataModelLib.SourceGenerator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Data.SqlTypes;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Xml.Linq;

namespace DataModelLib.Common
{

	
	[Generator]
	public class CodeGenerator : BaseCodeGenerator
	{
		
		private const string TableChangedEventHandlerSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public enum TableChangedActions {Add,Remove};
			public delegate void TableChangedEventHandler<T>(T Item,TableChangedActions Action, int Index);
			public delegate void RowChangedEventHandler<T>(T Item,string PropertyName,object OldValue,object NewValue);
		}
		""";

		private const string DatabaseAttributeSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
		  
			[AttributeUsage(AttributeTargets.Class, Inherited = false)]
			public class DatabaseAttribute : Attribute
			{
			}
		}
		""";
		private const string TableAttributeSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
		  
			[AttributeUsage(AttributeTargets.Class, Inherited = false)]
			public class TableAttribute : Attribute
			{
			}
		}
		""";

		private const string ColumnAttributeSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
		  
			[AttributeUsage(AttributeTargets.Property, Inherited = false)]
			public class ColumnAttribute : Attribute
			{
				public string? DisplayName
				{
					get;
					set;
				}
				public ColumnAttribute()
				{
				}
			}
		}
		""";

		private const string PrimaryKeyAttributeSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
		  
			[AttributeUsage(AttributeTargets.Property, Inherited = false)]
			public class PrimaryKeyAttribute : Attribute
			{
				
			}
		}
		""";

		private const string ForeignKeyAttributeSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		
		namespace {{Namespace}}
		{
			public enum CascadeTriggers {None,Delete,Update};
		  
			[AttributeUsage(AttributeTargets.Property, Inherited = false)]
			public class ForeignKeyAttribute : Attribute
			{
				public string ForeignPropertyName
				{
					get;
					private set;
				}
				public string PrimaryPropertyName
				{
					get;
					private set;
				}
				public string PrimaryTable
				{
					get;
					private set;
				}
				public string PrimaryKey
				{
					get;
					private set;
				}
				public CascadeTriggers CascadeTrigger
				{
					get;
					private set;
				}


				public ForeignKeyAttribute(string ForeignPropertyName, string PrimaryPropertyName,string PrimaryTable,string PrimaryKey,CascadeTriggers CascadeTrigger)
				{
					this.ForeignPropertyName=ForeignPropertyName;this.PrimaryPropertyName=PrimaryPropertyName; this.PrimaryTable=PrimaryTable; this.PrimaryKey=PrimaryKey;this.CascadeTrigger=CascadeTrigger;
				}
			}
		}
		""";

		private const string EnumerableExtensionSourceCode =
		$$"""
		// <auto-generated/>
		using System;
		using System.Collections.Generic;
		using System.Linq;
			
		namespace {{Namespace}}
		{
		  
			public static class EnumerableExtension
			{
				public static int FirstIndexMatch<TItem>(this IEnumerable<TItem> items, Func<TItem,bool> matchCondition)
				{
					var index = 0;
					foreach (TItem item in items)
					{
						if (matchCondition(item)) return index;
						index++;
					}
					return -1;
				}
			}
		}
		""";


		protected override void OnRegisterStaticSources(IncrementalGeneratorInitializationContext context)
		{
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Delegates/TableChangedDelegate.g.cs", SourceText.From(TableChangedEventHandlerSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Attributes/DatabaseAttribute.g.cs", SourceText.From(DatabaseAttributeSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Attributes/TableAttribute.g.cs", SourceText.From(TableAttributeSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Attributes/ColumnAttribute.g.cs", SourceText.From(ColumnAttributeSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Attributes/PrimaryKeyAttribute.g.cs", SourceText.From(PrimaryKeyAttributeSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Attributes/ForeignKeyAttribute.g.cs", SourceText.From(ForeignKeyAttributeSourceCode, Encoding.UTF8)));
			context.RegisterPostInitializationOutput(ctx => ctx.AddSource("Extensions/EnumerableExtension.g.cs", SourceText.From(EnumerableExtensionSourceCode, Encoding.UTF8)));
		}

		protected override void OnGenerateDynamicSources(SourceProductionContext context, Database database)
		{
			string source;
			DatabaseSourceGenerator databaseSourceGenerator;
			DatabaseModelSourceGenerator databaseModelSourceGenerator;
			ModelSourceGenerator tableModelSourceGenerator;

			databaseSourceGenerator = new DatabaseSourceGenerator();
			source=databaseSourceGenerator.GenerateSource(database);
			context.AddSource($"{database.DatabaseName}.g.cs", SourceText.From(source, Encoding.UTF8));

			databaseModelSourceGenerator=new DatabaseModelSourceGenerator();
			source = databaseModelSourceGenerator.GenerateSource(database);
			context.AddSource($"Models/{database.DatabaseName}Model.g.cs", SourceText.From(source, Encoding.UTF8));

			tableModelSourceGenerator=new ModelSourceGenerator();
			// On ajoute le code source des tables
			foreach (Table table in database.Tables)
			{
				source = tableModelSourceGenerator.GenerateSource(table);
				context.AddSource($"Models/{table.TableName}Model.g.cs", SourceText.From(source, Encoding.UTF8));
			}

		}








	}
}